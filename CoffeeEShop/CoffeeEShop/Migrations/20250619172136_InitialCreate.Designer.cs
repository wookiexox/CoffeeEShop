// <auto-generated />
using System;
using CoffeeEShop.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoffeeEShop.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250619172136_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.17");

            modelBuilder.Entity("CoffeeEShop.Core.Models.BasketItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("BasketItems");
                });

            modelBuilder.Entity("CoffeeEShop.Core.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 19, 19, 21, 36, 108, DateTimeKind.Local).AddTicks(5989),
                            Email = "john.doe@email.com",
                            FirstName = "John",
                            LastName = "Doe",
                            PasswordHash = new byte[0],
                            PasswordSalt = new byte[0],
                            PhoneNumber = "123-456-7890",
                            Role = ""
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 19, 19, 21, 36, 108, DateTimeKind.Local).AddTicks(6053),
                            Email = "jane.smith@email.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            PasswordHash = new byte[0],
                            PasswordSalt = new byte[0],
                            PhoneNumber = "098-765-4321",
                            Role = ""
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 19, 19, 21, 36, 108, DateTimeKind.Local).AddTicks(6055),
                            Email = "mike.johnson@email.com",
                            FirstName = "Mike",
                            LastName = "Johnson",
                            PasswordHash = new byte[0],
                            PasswordSalt = new byte[0],
                            PhoneNumber = "555-123-4567",
                            Role = ""
                        });
                });

            modelBuilder.Entity("CoffeeEShop.Core.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CoffeeEShop.Core.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "250g",
                            IsAvailable = true,
                            Name = "CoffeeLab",
                            Price = 40.00m,
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "500g",
                            IsAvailable = true,
                            Name = "Braziliana",
                            Price = 70.99m,
                            StockQuantity = 80
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Description = "1000g",
                            IsAvailable = true,
                            Name = "Qubana",
                            Price = 120.75m,
                            StockQuantity = 90
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Description = "500g",
                            IsAvailable = true,
                            Name = "ColCoffee",
                            Price = 52.25m,
                            StockQuantity = 50
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            Description = "250g",
                            IsAvailable = true,
                            Name = "EthCoffee",
                            Price = 21.37m,
                            StockQuantity = 30
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 4,
                            Description = "500g",
                            IsAvailable = true,
                            Name = "CoffeeKenya",
                            Price = 111.33m,
                            StockQuantity = 0
                        });
                });

            modelBuilder.Entity("CoffeeEShop.Core.Models.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Chocolate and hazelnut notes",
                            Name = "Brazil"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Chocolate and carmel notes",
                            Name = "Columbia"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Tea and herbal notes",
                            Name = "Ethiopia"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Red fruits notes",
                            Name = "Kenya"
                        });
                });

            modelBuilder.Entity("CoffeeEShop.Core.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("CoffeeEShop.Core.Models.BasketItem", b =>
                {
                    b.HasOne("CoffeeEShop.Core.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CoffeeEShop.Core.Models.Order", b =>
                {
                    b.HasOne("CoffeeEShop.Core.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("CoffeeEShop.Core.Models.Product", b =>
                {
                    b.HasOne("CoffeeEShop.Core.Models.ProductCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CoffeeEShop.Core.OrderItem", b =>
                {
                    b.HasOne("CoffeeEShop.Core.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CoffeeEShop.Core.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
